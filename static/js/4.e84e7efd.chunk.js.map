{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","DialogItem","memo","className","s","dialog","id","name","Message","message","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","AddMessageFormRedux","onSubmit","values","addNewMessage","newMessageBody","maxLength50","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","component","Textarea","validate","required","DialogsContainer","compose","dispatch"],"mappings":"kQASMA,EAAkB,SAACC,GAAD,MAAoC,CACxDC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAsBC,GAAsC,IAClEC,EADiE,uKAEzD,IAAD,EAC0BC,KAAKC,MAA9BN,EADD,EACCA,OAAWO,EADZ,0BAGL,OAAKP,EAGE,kBAACG,EAAeI,GAFZ,kBAAC,IAAD,CAAUC,GAAG,eANuC,GACvCC,IAAMN,WAUtC,OAAOO,YAAQZ,EAARY,CAAyBN,K,0CCvBpCO,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,4B,8ICIhGC,EAAmCJ,IAAMK,MAAK,SAACR,GACxD,OACI,yBAAKS,UAAWC,IAAEC,QACd,kBAAC,IAAD,CAAST,GAAE,oBAAeF,EAAMY,KAAOZ,EAAMa,U,oCCA1CC,EAJwB,SAACd,GACpC,OAAO,yBAAKS,UAAWC,IAAEK,SAAUf,EAAMe,U,kCCahCC,EAA+Bb,IAAMK,MAAK,SAACR,GACpD,IAAMiB,EAAkBjB,EAAMkB,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAClD,kBAACd,EAAD,CAAYe,IAAKD,EAAET,GAAIC,KAAMQ,EAAER,KAAMD,GAAIS,EAAET,QAEzCW,EAAmBvB,EAAMkB,YAAYM,SAASJ,KAAI,SAACK,GAAD,OACpD,kBAAC,EAAD,CAASH,IAAKG,EAAEb,GAAIG,QAASU,EAAEV,QAASH,GAAIa,EAAEb,QAKlD,OACI,yBAAKH,UAAWC,IAAES,SACd,yBAAKV,UAAWC,IAAEgB,cAAeT,GACjC,yBAAKR,UAAWC,IAAEc,UAAWD,GAC7B,kBAACI,EAAD,CAAqBC,SAPV,SAACC,GAChB7B,EAAM8B,cAAcD,EAAOE,uBAU7BC,EAAcC,YAAiB,IAc/BN,EAAsBO,YAAU,CAAEC,KAAM,wBAAlBD,EAbL,SAAClC,GACpB,OACI,0BAAM4B,SAAU5B,EAAMoC,cAClB,kBAACC,EAAA,EAAD,CACIxB,KAAK,iBACLyB,YAAY,qBACZC,UAAWC,IACXC,SAAU,CAACC,IAAUV,KAEzB,4CC7BNW,EAAmBC,kBACrBxC,aAXoB,SAACX,GAAD,MAA0B,CAC9CyB,YAAazB,EAAMyB,gBAGI,SAAC2B,GAAD,MAAoB,CAC3Cf,cAAe,SAACC,GACZc,EAASf,YAAcC,SAM3BnC,IAFqBgD,CAGvB5B,GACa2B","file":"static/js/4.e84e7efd.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { AppStateType } from '../redux/store'\n\ntype MSTPType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MSTPType => ({\n    isAuth: state.auth.isAuth,\n})\n\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\n    class RedirectComponent extends React.Component<MSTPType> {\n        render() {\n            let { isAuth, ...restProps } = this.props\n\n            if (!isAuth) {\n                return <Redirect to=\"/login\" />\n            }\n            return <Component {...(restProps as WCP)} />\n        }\n    }\n    return connect(mapStateToProps)(RedirectComponent)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"messages\":\"Dialogs_messages__1w_Up\"};","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { DialogType } from '../../../Types'\nimport s from './DialogItem.module.css'\n\nexport const DialogItem: React.FC<DialogType> = React.memo((props) => {\n    return (\n        <div className={s.dialog}>\n            <NavLink to={`/messages/${props.id}`}>{props.name}</NavLink>\n        </div>\n    )\n})\n","import React from 'react'\nimport { MessageType } from '../../../Types'\nimport s from './Message.module.css'\n\nconst Message: React.FC<MessageType> = (props) => {\n    return <div className={s.message}>{props.message}</div>\n}\n\nexport default Message\n","import React from 'react'\nimport { DialogItem } from './DialogItem/DialogItem'\nimport s from './Dialogs.module.css'\nimport Message from './Message/Message'\nimport { Field, reduxForm } from 'redux-form'\nimport { maxLengthCreator, required } from '../../utils/validators/validators'\nimport { Textarea } from '../common/FormsControls/FormsControls'\nimport { DialogsPageType } from '../../Types'\n\ntype MSTPType = {\n    dialogsPage: DialogsPageType\n}\ntype MDTPType = {\n    addNewMessage: (newMessageBody: string) => void\n}\n\ntype PropsType = MSTPType & MDTPType\n\nexport const Dialogs: React.FC<PropsType> = React.memo((props) => {\n    const dialogsElements = props.dialogsPage.dialogs.map((d) => (\n        <DialogItem key={d.id} name={d.name} id={d.id} />\n    ))\n    const messagesElements = props.dialogsPage.messages.map((m) => (\n        <Message key={m.id} message={m.message} id={m.id} />\n    ))\n    const addMessage = (values: any) => {\n        props.addNewMessage(values.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>{dialogsElements}</div>\n            <div className={s.messages}>{messagesElements}</div>\n            <AddMessageFormRedux onSubmit={addMessage} />\n        </div>\n    )\n})\nconst maxLength50 = maxLengthCreator(50)\nconst AddMessageForm = (props: any) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                name=\"newMessageBody\"\n                placeholder=\"Enter your message\"\n                component={Textarea}\n                validate={[required, maxLength50]}\n            ></Field>\n            <button>Send</button>\n        </form>\n    )\n}\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(\n    AddMessageForm\n)\n","import { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\nimport { addNewMessage } from '../../redux/dialogs-reducer'\nimport { AppStateType } from '../../redux/store'\nimport { Dialogs } from './Dialogs'\n\nconst mapStateToProps = (state: AppStateType) => ({\n    dialogsPage: state.dialogsPage,\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    addNewMessage: (newMessageBody: string) => {\n        dispatch(addNewMessage(newMessageBody))\n    },\n})\n\nconst DialogsContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\nexport default DialogsContainer\n"],"sourceRoot":""}