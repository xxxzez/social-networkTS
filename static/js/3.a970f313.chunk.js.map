{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","Post","memo","className","s","item","src","logo","alt","message","likesCount","onClick","deletePost","id","MyPosts","userId","postsElements","posts","map","p","key","AddPostFormRedux","onSubmit","values","addPost","newPostBody","maxLength20","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","MyPostsContainer","profilePage","dispatch","addPostAC","connector","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","updateStatus","type","value","autoFocus","onChange","e","currentTarget","ProfileDataReduxForm","initialValues","error","createField","Input","Object","keys","contacts","contact","ProfileInfo","profile","isOwner","savePhoto","saveProfile","Preloader","profilePicture","photos","large","target","files","length","formData","then","goToEditMode","ProfileData","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","Profile","ProfileClassContainer","refreshProfile","match","params","authorizedUserId","history","push","getProfile","getStatus","componentDidMount","prevProps","ProfileContainer","compose","withRouter"],"mappings":"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","file":"static/js/3.a970f313.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { RootStateType } from '../Types'\n\ntype MSTPType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: RootStateType): MSTPType => ({\n    isAuth: state.auth.isAuth,\n})\n\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\n    class RedirectComponent extends React.Component<MSTPType> {\n        render() {\n            let { isAuth, ...restProps } = this.props\n\n            if (!isAuth) {\n                return <Redirect to=\"/login\" />\n            }\n            return <Component {...(restProps as WCP)} />\n        }\n    }\n    return connect(mapStateToProps)(RedirectComponent)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__2LHtf\",\"profilePicture\":\"ProfileInfo_profilePicture__3fsPe\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3dzvr\",\"profilePicture\":\"Profile_profilePicture__2kcbj\"};","import React from 'react'\nimport s from './Post.module.css'\nimport logo from '../../../../assets/canadaFlag.jpeg'\n\ntype PostType = {\n    message: string\n    likesCount: number\n    id: string\n    deletePost: (userId: string) => void\n}\n\nconst Post: React.FC<PostType> = React.memo((props) => {\n    const onDelete = () => {\n        props.deletePost(props.id)\n    }\n    return (\n        <div className={s.item}>\n            <img src={logo} alt=\"\" />\n            {props.message}\n            <div>\n                <span>Like! </span>\n                {props.likesCount}\n                <button onClick={onDelete}>Delete post</button>\n            </div>\n        </div>\n    )\n})\n\nexport default Post\n","import React from 'react'\nimport Post from './Post/Post'\nimport s from './MyPosts.module.css'\nimport { MyPostsPropsFromRedux } from './MyPostsContainer'\nimport { Field, reduxForm } from 'redux-form'\nimport {\n    maxLengthCreator,\n    required,\n} from '../../../utils/validators/validators'\nimport { Textarea } from '../../common/FormsControls/FormsControls'\n\ntype PropsType = MyPostsPropsFromRedux\n\nconst MyPosts: React.FC<PropsType> = React.memo((props) => {\n    const onAddPost = (values: any) => {\n        props.addPost(values.newPostBody)\n    }\n    const deletePost = (userId: string) =>{\n        props.deletePost(userId)\n    }\n\n    const postsElements = props.posts.map((p) => (\n        <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount} deletePost={deletePost} />\n    ))\n\n    return (\n        <div>\n            <h3>My posts</h3>\n            <AddPostFormRedux onSubmit={onAddPost} />\n            <div className={s.posts}>{postsElements}</div>\n        </div>\n    )\n})\n\nexport default MyPosts\n\nconst maxLength20 = maxLengthCreator(20)\n\nconst AddPostForm = (props: any) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                name=\"newPostBody\"\n                placeholder=\"Send\"\n                component={Textarea}\n                validate={[required, maxLength20]}\n            ></Field>\n            <button>Send</button>\n        </form>\n    )\n}\nconst AddPostFormRedux = reduxForm({ form: 'profileAddPostForm' })(AddPostForm)\n","import { connect, ConnectedProps } from 'react-redux'\nimport { RootStateType } from '../../../Types'\nimport { addPostAC, deletePost } from '../../../redux/profile-reducer'\nimport MyPosts from './MyPosts'\n\nconst mapStateToProps = (state: RootStateType) => ({\n    posts: state.profilePage.posts,\n})\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addPost: (newPostBody: string) => {\n            dispatch(addPostAC(newPostBody))\n        },\n        deletePost: (userId: string) => {\n            dispatch(deletePost(userId))\n        },\n    }\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps)\nexport type MyPostsPropsFromRedux = ConnectedProps<typeof connector>\nconst MyPostsContainer = connector(MyPosts)\n\nexport default MyPostsContainer\n","import React, { ChangeEvent, useEffect, useState } from 'react'\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatus = (props: PropsType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n    return (\n        <div>\n            <b>Status:</b>\n            {!editMode && (\n                <span onClick={activateEditMode}>{status || '-----'}</span>\n            )}\n            {editMode && (\n                <div>\n                    <input\n                        onBlur={deactivateEditMode}\n                        type=\"text\"\n                        value={status}\n                        autoFocus\n                        onChange={onStatusChange}\n                    />\n                </div>\n            )}\n        </div>\n    )\n}\n","import React from 'react'\nimport { reduxForm } from 'redux-form'\nimport {\n    createField,\n    Input,\n    Textarea,\n} from '../../common/FormsControls/FormsControls'\nimport s from './ProfileInfo.module.css'\n\n\nconst ProfileDataForm = ({ handleSubmit, initialValues, error }: any) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <button onClick={() => {}}>Save</button>\n            </div>\n\n            <div>\n                <b>Full name:</b>\n                {createField('Full name', 'fullName', [], Input)}\n            </div>\n\n            <div>\n                <b>Looking for a job?</b>\n                {createField('', 'lookingForAJob', [], Input, {\n                    type: 'checkbox',\n                })}\n            </div>\n\n            <div>\n                <b>My professional skills:</b>\n                {createField(\n                    'My professional skills',\n                    'lookingForAJobDescription',\n                    [],\n                    Textarea\n                )}\n            </div>\n\n            <div>\n                <b>About me: </b>\n                {createField('About me', 'aboutMe', [], Textarea)}\n            </div>\n            <div>\n                <b>Contacts:</b>:\n                {Object.keys(initialValues.contacts).map((key) => {\n                    return (\n                        <div className={s.contact} key={key}>\n                            <b>\n                                {key}:{' '}\n                                {createField(key, 'contacts.' + key, [], Input)}\n                            </b>\n                        </div>\n                    )\n                })}\n            </div>\n        </form>\n    )\n}\n\nexport const ProfileDataReduxForm = reduxForm({ form: 'edit-profile' })(\n    ProfileDataForm\n)\n","import React, { ChangeEvent, useState } from 'react'\nimport s from './ProfileInfo.module.css'\nimport { Preloader } from '../../common/Preloader/Preloader'\nimport { ProfileType } from '../../../Types'\nimport profilePicture from '../../../assets/profilePicture.png'\nimport { ProfileStatus } from './ProfileStatus'\nimport { ProfileDataReduxForm } from './ProfileDataForm'\n\ntype PropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n    saveProfile: any\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({\n    profile,\n    status,\n    updateStatus,\n    isOwner,\n    savePhoto,\n    saveProfile,\n}) => {\n    const [editMode, setEditMode] = useState(false)\n\n    if (!profile) {\n        return <Preloader />\n    }\n\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (formData: any) => {\n        saveProfile(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    return (\n        <div className={s.profile}>\n            <div className={s.profilePicture}>\n                {profile.photos.large ? (\n                    <img src={profile.photos.large} alt=\"\" />\n                ) : (\n                    <img src={profilePicture} alt=\"\" />\n                )}\n            </div>\n            {isOwner && <input type=\"file\" onChange={mainPhotoSelected} />}\n            <ProfileStatus status={status} updateStatus={updateStatus} />\n\n            {editMode ? (\n                <ProfileDataReduxForm\n                    initialValues={profile}\n                    onSubmit={onSubmit}\n                />\n            ) : (\n                <ProfileData\n                    profile={profile}\n                    isOwner={isOwner}\n                    goToEditMode={() => {\n                        setEditMode(true)\n                    }}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ProfileInfo\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: any\n}\n\nconst ProfileData = ({ profile, isOwner, goToEditMode }: any) => {\n    return (\n        <div>\n            {isOwner && (\n                <div>\n                    <button onClick={goToEditMode}>Edit</button>\n                </div>\n            )}\n\n            <div>\n                <b>Name:</b> {profile.fullName}\n            </div>\n            <div>\n                <b>About me: </b>\n                {profile.aboutMe}\n            </div>\n            <div>\n                <b>Looking for a job?</b>\n                {profile.lookingForAJob ? 'Yes' : 'No'}\n            </div>\n            {profile.lookingForAJob && (\n                <div>\n                    <b>My professional skills:</b>\n                    {profile.lookingForAJobDescription}\n                </div>\n            )}\n            <div>\n                <b>Contacts:</b>:\n                {Object.keys(profile.contacts).map((key) => {\n                    return (\n                        <Contact\n                            key={key}\n                            contactTitle={key}\n                            contactValue={profile.contacts[key]}\n                        />\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nconst Contact = ({ contactTitle, contactValue }: ContactPropsType) => {\n    return (\n        <div className={s.contact}>\n            <b>{contactTitle}</b>: {contactValue}\n        </div>\n    )\n}\n","import React from 'react'\nimport { ProfileType } from '../../Types'\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\nimport s from './Profile.module.css'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\n\ntype PropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n    saveProfile: any\n}\n\nexport const Profile: React.FC<PropsType> = (props) => {\n    return (\n        <div className={s.profile}>\n            <ProfileInfo\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                isOwner={props.isOwner}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer />\n        </div>\n    )\n}\n","import React from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { Profile } from './Profile'\nimport {\n    getProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n} from '../../redux/profile-reducer'\nimport { RootStateType } from '../../Types'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\nimport { compose } from 'redux'\n\ntype PathParamsType = {\n    userId: any\n}\nexport type ProfilePropsFromRedux = ConnectedProps<typeof connector>\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsFromRedux\n\nclass ProfileClassContainer extends React.Component<PropsType> {\n    refreshProfile = () => {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getProfile(userId)\n        this.props.getStatus(userId)\n    }\n    componentDidMount = () => {\n        this.refreshProfile()\n    }\n    componentDidUpdate(prevProps: PropsType) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n                isOwner={!this.props.match.params.userId}\n                savePhoto={this.props.savePhoto}\n                saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: RootStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth,\n})\n\nconst connector = connect(mapStateToProps, {\n    getProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n})\n\nconst ProfileContainer = compose<React.ComponentType>(\n    connector,\n    withRouter,\n    withAuthRedirect\n)(ProfileClassContainer)\n\nexport default ProfileContainer\n"],"sourceRoot":""}