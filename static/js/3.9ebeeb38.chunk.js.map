{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/Profile.module.css","../node_modules/@material-ui/icons/CloudUpload.js","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","value","default","_default","createElement","d","Post","memo","className","s","item","src","logo","alt","message","likesCount","Button","variant","color","onClick","deletePost","id","MyPosts","userId","postsElements","posts","map","p","key","AddPostFormRedux","onSubmit","values","addPost","newPostBody","maxLength20","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","MyPostsContainer","profilePage","dispatch","addPostAC","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","updateStatus","type","autoFocus","onChange","e","currentTarget","ProfileDataReduxForm","initialValues","error","createField","Input","keys","contacts","contact","ProfileInfo","profile","isOwner","savePhoto","saveProfile","Preloader","profilePicture","photos","large","startIcon","target","files","length","hidden","formData","then","goToEditMode","ProfileData","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","Profile","ProfileClassContainer","refreshProfile","match","params","authorizedUserId","history","push","getProfile","getStatus","componentDidMount","prevProps","ProfileContainer","compose","withRouter"],"mappings":"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","file":"static/js/3.9ebeeb38.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { AppStateType } from '../redux/store'\n\ntype MSTPType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MSTPType => ({\n    isAuth: state.auth.isAuth,\n})\n\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\n    class RedirectComponent extends React.Component<MSTPType> {\n        render() {\n            let { isAuth, ...restProps } = this.props\n\n            if (!isAuth) {\n                return <Redirect to=\"/login\" />\n            }\n            return <Component {...(restProps as WCP)} />\n        }\n    }\n    return connect(mapStateToProps)(RedirectComponent)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__2LHtf\",\"profilePicture\":\"ProfileInfo_profilePicture__3fsPe\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3dzvr\",\"profilePicture\":\"Profile_profilePicture__2kcbj\"};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\"\n}), 'CloudUpload');\n\nexports.default = _default;","import React from 'react'\nimport s from './Post.module.css'\nimport logo from '../../../../assets/canadaFlag.jpeg'\nimport Button from '@material-ui/core/Button'\n\ntype PropsType = {\n    message: string\n    likesCount: number\n    id: string\n    deletePost: (userId: string) => void\n}\n\nconst Post: React.FC<PropsType> = React.memo((props) => {\n    const onDelete = () => {\n        props.deletePost(props.id)\n    }\n    return (\n        <div className={s.item}>\n            <img src={logo} alt=\"\" />\n            {props.message}\n            <div>\n                <span>Like!</span>\n                {props.likesCount}\n                <Button variant=\"contained\" color=\"primary\" onClick={onDelete}>\n                    Delete post\n                </Button>\n            </div>\n        </div>\n    )\n})\n\nexport default Post\n","import React from 'react'\nimport Post from './Post/Post'\nimport s from './MyPosts.module.css'\nimport { Field, reduxForm } from 'redux-form'\nimport {\n    maxLengthCreator,\n    required,\n} from '../../../utils/validators/validators'\nimport { Textarea } from '../../common/FormsControls/FormsControls'\nimport Button from '@material-ui/core/Button'\nimport { PostType } from '../../../Types'\n\ntype MSTPType = {\n    posts: PostType[]\n}\ntype MDTPType = {\n    addPost: (newPostBody: string) => void\n    deletePost: (userId: string) => void\n}\ntype PropsType = MSTPType & MDTPType\n\nconst MyPosts: React.FC<PropsType> = React.memo((props) => {\n    const onAddPost = (values: any) => {\n        props.addPost(values.newPostBody)\n    }\n    const deletePost = (userId: string) => {\n        props.deletePost(userId)\n    }\n    const postsElements = props.posts.map((p) => (\n        <Post\n            key={p.id}\n            id={p.id}\n            message={p.message}\n            likesCount={p.likesCount}\n            deletePost={deletePost}\n        />\n    ))\n    return (\n        <div className={s.posts}>\n            <h3>My posts</h3>\n            <AddPostFormRedux onSubmit={onAddPost} />\n            <div className={s.posts}>{postsElements}</div>\n        </div>\n    )\n})\n\nexport default MyPosts\n\nconst maxLength20 = maxLengthCreator(20)\n\nconst AddPostForm: React.FC<any> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                name=\"newPostBody\"\n                placeholder=\"Send\"\n                component={Textarea}\n                validate={[required, maxLength20]}\n            ></Field>\n            <Button variant=\"contained\" color=\"primary\">\n                Send\n            </Button>\n        </form>\n    )\n}\nconst AddPostFormRedux = reduxForm({ form: 'profileAddPostForm' })(AddPostForm)\n","import { connect } from 'react-redux'\nimport { addPostAC, deletePost } from '../../../redux/profile-reducer'\nimport MyPosts from './MyPosts'\nimport { AppStateType } from '../../../redux/store'\n\nconst mapStateToProps = (state: AppStateType) => ({\n    posts: state.profilePage.posts,\n})\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addPost: (newPostBody: string) => {\n            dispatch(addPostAC(newPostBody))\n        },\n        deletePost: (userId: string) => {\n            dispatch(deletePost(userId))\n        },\n    }\n}\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\nexport default MyPostsContainer\n","import React, { ChangeEvent, useEffect, useState } from 'react'\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatus: React.FC<PropsType> = (props) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n    return (\n        <div>\n            <b>Status:</b>\n            {!editMode && (\n                <span onClick={activateEditMode}>{status || '--------'}</span>\n            )}\n            {editMode && (\n                <div>\n                    <input\n                        onBlur={deactivateEditMode}\n                        type=\"text\"\n                        value={status}\n                        autoFocus\n                        onChange={onStatusChange}\n                    />\n                </div>\n            )}\n        </div>\n    )\n}\n","import React from 'react'\nimport { reduxForm } from 'redux-form'\nimport {\n    createField,\n    Input,\n    Textarea,\n} from '../../common/FormsControls/FormsControls'\nimport s from './ProfileInfo.module.css'\n\nconst ProfileDataForm: React.FC<any> = ({\n    handleSubmit,\n    initialValues,\n    error,\n}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <button onClick={() => {}}>Save</button>\n            </div>\n\n            <div>\n                <b>Full name:</b>\n                {createField('Full name', 'fullName', [], Input)}\n            </div>\n\n            <div>\n                <b>Looking for a job?</b>\n                {createField('', 'lookingForAJob', [], Input, {\n                    type: 'checkbox',\n                })}\n            </div>\n\n            <div>\n                <b>My professional skills:</b>\n                {createField(\n                    'My professional skills',\n                    'lookingForAJobDescription',\n                    [],\n                    Textarea\n                )}\n            </div>\n\n            <div>\n                <b>About me: </b>\n                {createField('About me', 'aboutMe', [], Textarea)}\n            </div>\n            <div>\n                <b>Contacts:</b>:\n                {Object.keys(initialValues.contacts).map((key) => {\n                    return (\n                        <div className={s.contact} key={key}>\n                            <b>\n                                {key}:{' '}\n                                {createField(key, 'contacts.' + key, [], Input)}\n                            </b>\n                        </div>\n                    )\n                })}\n            </div>\n        </form>\n    )\n}\n\nexport const ProfileDataReduxForm = reduxForm({ form: 'edit-profile' })(\n    ProfileDataForm\n)\n","import React, { ChangeEvent, useState } from 'react'\nimport s from './ProfileInfo.module.css'\nimport { Preloader } from '../../common/Preloader/Preloader'\nimport { ProfileType } from '../../../Types'\nimport profilePicture from '../../../assets/profilePicture.png'\nimport { ProfileStatus } from './ProfileStatus'\nimport { ProfileDataReduxForm } from './ProfileDataForm'\nimport Button from '@material-ui/core/Button'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\n\ntype PropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n    saveProfile: any\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({\n    profile,\n    status,\n    updateStatus,\n    isOwner,\n    savePhoto,\n    saveProfile,\n}) => {\n    const [editMode, setEditMode] = useState(false)\n\n    if (!profile) {\n        return <Preloader />\n    }\n\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (formData: any) => {\n        saveProfile(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    return (\n        <div className={s.profile}>\n            <div className={s.profilePicture}>\n                {profile.photos.large ? (\n                    <img src={profile.photos.large} alt=\"\" />\n                ) : (\n                    <img src={profilePicture} alt=\"\" />\n                )}\n            </div>\n            {isOwner && (\n                <div>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        startIcon={<CloudUploadIcon />}\n                        component=\"label\"\n                    >\n                        Upload File\n                        <input\n                            onChange={mainPhotoSelected}\n                            type=\"file\"\n                            hidden\n                        />\n                    </Button>\n                </div>\n            )}\n\n            <ProfileStatus status={status} updateStatus={updateStatus} />\n\n            {editMode ? (\n                <ProfileDataReduxForm\n                    initialValues={profile}\n                    onSubmit={onSubmit}\n                />\n            ) : (\n                <ProfileData\n                    profile={profile}\n                    isOwner={isOwner}\n                    goToEditMode={() => {\n                        setEditMode(true)\n                    }}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ProfileInfo\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: any\n}\n\nconst ProfileData: React.FC<any> = ({ profile, isOwner, goToEditMode }) => {\n    return (\n        <div>\n            {isOwner && (\n                <div>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={goToEditMode}\n                    >\n                        Edit\n                    </Button>\n                </div>\n            )}\n\n            <div>\n                <b>Name:</b> {profile.fullName}\n            </div>\n            <div>\n                <b>About me: </b>\n                {profile.aboutMe}\n            </div>\n            <div>\n                <b>Looking for a job?</b>\n                {profile.lookingForAJob ? 'Yes' : 'No'}\n            </div>\n            {profile.lookingForAJob && (\n                <div>\n                    <b>My professional skills:</b>\n                    {profile.lookingForAJobDescription}\n                </div>\n            )}\n            <div>\n                <b>Contacts:</b>:\n                {Object.keys(profile.contacts).map((key) => {\n                    return (\n                        <Contact\n                            key={key}\n                            contactTitle={key}\n                            contactValue={profile.contacts[key]}\n                        />\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nconst Contact: React.FC<ContactPropsType> = ({\n    contactTitle,\n    contactValue,\n}) => {\n    return (\n        <div className={s.contact}>\n            <b>{contactTitle}</b>: {contactValue}\n        </div>\n    )\n}\n","import React from 'react'\nimport { ProfileType } from '../../Types'\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\nimport s from './Profile.module.css'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\n\ntype PropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n    saveProfile: any\n}\n\nexport const Profile: React.FC<PropsType> = ({\n    profile,\n    status,\n    updateStatus,\n    isOwner,\n    savePhoto,\n    saveProfile,\n}) => {\n    return (\n        <div className={s.profile}>\n            <ProfileInfo\n                profile={profile}\n                status={status}\n                updateStatus={updateStatus}\n                isOwner={isOwner}\n                savePhoto={savePhoto}\n                saveProfile={saveProfile}\n            />\n            <MyPostsContainer />\n        </div>\n    )\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Profile } from './Profile'\nimport {\n    getProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n} from '../../redux/profile-reducer'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\nimport { compose } from 'redux'\nimport { AppStateType } from '../../redux/store'\nimport { ProfileType } from '../../Types'\n\ntype PathParamsType = {\n    userId: any\n}\n\ntype PropsType = RouteComponentProps<PathParamsType> & ConnectedPropsType\n\nclass ProfileClassContainer extends React.Component<PropsType> {\n    refreshProfile = () => {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getProfile(userId)\n        this.props.getStatus(userId)\n    }\n    componentDidMount = () => {\n        this.refreshProfile()\n    }\n    componentDidUpdate(prevProps: PropsType) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n                isOwner={!this.props.match.params.userId}\n                savePhoto={this.props.savePhoto}\n                saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\ntype MSTPType = {\n    profile: ProfileType\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\ntype MDTPType = {\n    getProfile: any\n    getStatus: any\n    updateStatus: any\n    savePhoto: any\n    saveProfile: any\n}\ntype ConnectedPropsType = MSTPType & MDTPType\n\nconst mapStateToProps = (state: AppStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth,\n})\n\nconst ProfileContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getProfile,\n        getStatus,\n        updateStatus,\n        savePhoto,\n        saveProfile,\n    }),\n    withRouter,\n    withAuthRedirect\n)(ProfileClassContainer)\n\nexport default ProfileContainer\n"],"sourceRoot":""}